version: '3.8'

services:
  # --- INFRASTRUCTURE ---
  postgres:
    image: postgres:15
    container_name: tourist_safety_db
    environment:
      POSTGRES_DB: tourist_safety
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tourist_safety_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d tourist_safety"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tourist_safety_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - tourist_safety_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- BACKEND SERVICES ---
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: tourist_safety_auth
    ports:
      - "5002:5002"
    environment:
      - PORT=5002
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=tourist_safety
    networks:
      - tourist_safety_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  flask_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tourist_safety_backend
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD}@postgres:5432/tourist_safety
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET}
      - FLASK_ENV=production
    networks:
      - tourist_safety_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # --- API GATEWAY ---
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: tourist_safety_gateway
    ports:
      - "8000:8000"
    environment:
      - PORT=8000 
      - AUTH_SERVICE_URL=http://auth-service:5002
      - FLASK_BACKEND_URL=http://flask_backend:5000
    networks:
      - tourist_safety_network
    depends_on:
      - auth-service
      - flask_backend
    restart: unless-stopped

  # --- FRONTEND SERVICES ---
  user_app:
    build:
      context: ./frontend/landing
      dockerfile: Dockerfile
    container_name: tourist_safety_user_app
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - tourist_safety_network
    restart: unless-stopped
      
  admin_dashboard:
    build:
      context: ./frontend/dashboard
      dockerfile: Dockerfile
    container_name: tourist_safety_admin_dashboard
    ports:
      - "3002:3000"
    depends_on:
      - api-gateway
    networks:
      - tourist_safety_network
    restart: unless-stopped

networks:
  tourist_safety_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: